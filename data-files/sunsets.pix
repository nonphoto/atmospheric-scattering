// -*- c++ -*-
// Original "Sunsets" shader by Evan Entam (ThiSpawn): https://www.shadertoy.com/view/lss3DS
// Rewritten for G3D by Benji Jones, 2014

#version 330
#include <g3dmath.glsl>

// Input arguments from the C++ program
uniform mat4x3 cameraToWorldMatrix;

uniform float tanHalfFieldOfViewY;
uniform float projectionMatrix22, projectionMatrix23;

uniform float frame;
uniform float sunSpeed;
uniform float rayleighScale;
uniform float mieScale;

// Output to the App::m_framebuffer
out Color3 pixelColor;

//////////////////////////////////////////////////////////////

//===============================================================================================
// MATH CONSTANTS
//===============================================================================================

const float PI = 3.14159265358979323846;
const float PI_2 = 1.57079632679489661923;
const float PI_4 = 0.785398163397448309616; 

//===============================================================================================
// SCENE PARAMETERS
//===============================================================================================

// North is pointed by x
// East is pointed by z
// Sea Level : y = 0.0

struct slight // spotlight 
{
    vec3 pos; // position
    vec3 d; // diameter
    float i;// intensity
    vec3 c; // color
};

struct planet_t
{
    float rs;  // sea level radius
    float ra; // atmosphere radius
};

planet_t earth = planet_t(6360.0e3,
                          6420.0e3);

struct sun_t
{  
    vec3 beta_r;// rayleigh scattering coefs at sea level
    vec3 beta_m; // mie scattering coefs at sea level
    float sh_r; // rayleigh scale height
    float sh_m; // mie scale height
    float i;// sun intensity
    float mc;    // mean cosine
    float azi; // azimuth
    float alt; // altitude
    float ad; // angular diameter (between 0.5244 and 5.422 for our sun)
    vec3 color;
};

sun_t sun = sun_t(vec3(5.5e-6, 13.0e-6, 22.1e-6),
                  vec3(21.0e-6),
                  7994.0,
                  1200.0,
                  20.0,
                  0.76,
                  4.4,
                  PI_2,
                  0.53,
                  vec3(1.0, 1.0, 1.0));

// Use http://www.esrl.noaa.gov/gmd/grad/solcalc/azel.html to get azimuth and altitude
// of our sun at a specific place and time

// pred : rd is normalized
bool intersect_with_atmosphere(in vec3 ro, in vec3 rd, in planet_t planet, out float tr)
{

    float c = length(ro); // distance from center of the planet :)
    vec3 up_dir = ro / c;
    float beta = PI - acos(dot(rd, up_dir)); 
    float sb = sin(beta);
    float b = planet.ra;
    float bt = planet.rs - 10.0;
    
    tr = sqrt((b * b) - (c * c) * (sb * sb)) + c * cos(beta); // sinus law
    
    if (sqrt((bt * bt) - (c * c) * (sb * sb)) + c * cos(beta) > 0.0)
        return false;
    
    return true;
}

const int SKYLIGHT_VIEWDIR_SAMPLES = 12;
const int SKYLIGHT_SUNDIR_SAMPLES = 6;

float compute_sun_visibility(in sun_t sun, float alt) {
    float vap = 0.0;
    float h, a;
    float vvp = clamp((0.5 + alt / sun.ad), 0.0, 1.0); // vertically visible percentage
    if (vvp == 0.0)
        return 0.0;
    else if (vvp == 1.0)
        return 1.0;
    
    bool is_sup;
    
    if (vvp > 0.5) {
        is_sup = true;
        h = (vvp - 0.5) * 2.0;
    } else {
        is_sup = false;
        h = (0.5 - vvp) * 2.0;
    }
    
    float alpha = acos(h) * 2.0;
    a = (alpha - sin(alpha)) / (2.0 * PI);
    
    if (is_sup)
        vap = 1.0 - a;
    else
        vap = a;
    
    return vap;
}

vec3 compute_sky_light(in vec3 ro, in vec3 rd, in planet_t planet, in sun_t sun) {
    float t1;

    if (!intersect_with_atmosphere(ro, rd, planet, t1) || t1 < 0.0)
        return vec3(0.0);

    float segment_length = t1 / float(SKYLIGHT_VIEWDIR_SAMPLES);
    float t = 0.0;

    float calt = cos(sun.alt);
    vec3 sun_dir = vec3(cos(sun.azi) * calt,
                        sin(sun.alt),
                        sin(sun.azi) * calt);
    float mu = dot(rd, sun_dir);
    float mu2 = mu * mu;
    float mc2 = sun.mc * sun.mc;

    // rayleigh stuff
    vec3 sumr = vec3(0.0);
    float odr = 0.0; // optical depth
    float phase_r = (3.0 / (16.0 * PI)) * (1.0 + mu2);
    
    // mie stuff
    vec3 summ = vec3(0.0);
    float odm = 0.0; // optical depth
    float phase_m = ((3.0 / (8.0 * PI)) * ((1.0 - mc2) * (1.0 + mu2))) /
    ((2.0 + mc2) * pow(1.0 + mc2 - 2.0 * sun.mc * mu, 1.5));
    
    for (int i = 0; i < SKYLIGHT_VIEWDIR_SAMPLES; ++i)
        {
            vec3 sample_position = ro + rd * (t + 0.5 * segment_length);
            float h = length(sample_position) - planet.rs;
            float hr = exp(-h / sun.sh_r) * segment_length;
            odr += hr;
            float hm = exp(-h / sun.sh_m) * segment_length;
            odm += hm;
            float tm;
            float sp_alt = PI_2 - asin(planet.rs / length(sample_position));
            sp_alt += acos(normalize(sample_position).y) + sun.alt;
            float coef = compute_sun_visibility(sun, sp_alt);

            if (intersect_with_atmosphere(sample_position, sun_dir, planet, tm) || coef > 0.0)
                {
                    float sll = tm / float(SKYLIGHT_SUNDIR_SAMPLES);
                    float tl = 0.0;
                    float odlr = 0.0, odlm = 0.0;
                    for (int j = 0; j < SKYLIGHT_SUNDIR_SAMPLES; ++j)
                        {
                            vec3 spl = sample_position + sun_dir * (tl + 0.5 * sll);
                            float spl_alt = PI_2 - asin(planet.rs / length(spl));
                            spl_alt += acos(normalize(spl).y) + sun.alt;
                            float coefl = compute_sun_visibility(sun, spl_alt);
                            float hl = length(spl) - planet.rs;
                            odlr += exp(-hl / sun.sh_r) * sll * (1.0 - log(coefl + 0.000001));
                            odlm += exp(-hl / sun.sh_m) * sll * (1.0 - log(coefl + 0.000001));
                            tl += sll;
                        }
                    vec3 tau = sun.beta_r * (odr + odlr) + sun.beta_m * 1.05 * (odm + odlm);
                    vec3 attenuation = vec3(exp(-tau.x), exp(-tau.y), exp(-tau.z));
                    sumr +=  hr * attenuation * coef;
                    summ +=  hm * attenuation * coef;
                }
            t += segment_length;
        }

    return sun.i * (sumr * phase_r * sun.beta_r + summ * phase_m * sun.beta_m);
}

void main() {
    
    // Generate an eye ray in camera space, and then transform to world space
    
    // Primary ray origin    
    Point3 P  = cameraToWorldMatrix[3] + vec3(0.0, earth.rs + 0, 0.0);
    
    // Primary ray direction
    Vector3 w = Matrix3(cameraToWorldMatrix) * 
        normalize(Vector3((gl_FragCoord.xy - g3d_FragCoordExtent / 2.0) * Vector2(1, -1),
                          g3d_FragCoordExtent.y / ( -2.0 * tanHalfFieldOfViewY)));

    float maxDist = inf;       

    ///////////////////////////////////////////////
    /*
    vec2 q = gl_FragCoord.xy / resolution.xy;
    vec2 p = -1.0 + 2.0*q;
    p.x *= resolution.x / resolution.y;

    vec3 cameraPosition = vec3(0.0, 0.1, 1.4);
    vec3 cameraLookAt   = vec3(0.0, 1.0, 0.0);
    vec3 cameraUpDir    = vec3(0.0, 1.0, 0.0);

    vec3 viewDirection = normalize(cameraLookAt - cameraPosition);

    vec3 uu = normalize(cross(viewDirection, cameraUpDir));
    vec3 vv = normalize(cross(uu, viewDirection));
    vec3 rd = normalize(p.x * uu + p.y * vv + 1.56 * viewDirection);

    vec3 gp = cameraPosition + vec3(0.0, earth.rs + 1.0, 0.0);
    */

    sun.alt = -0.1 + 1.2 * PI_4 * (0.5 + cos(0.38 * (frame * sunSpeed)) / 2); // change to make it move

    vec3 result = compute_sky_light(P, w, earth, sun);

    pixelColor = result;

    //////////////////////////////////////
     
    // Camera space z value
    float csZ = maxDist / w.z;
    
    // Pack into standard OpenGL depth buffer format to make the result compatible
    // with rasterization and post-processing.
    gl_FragDepth = (maxDist == inf) ? 1.0 : ((projectionMatrix22 * csZ + projectionMatrix23) / -csZ);
}
